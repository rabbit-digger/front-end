/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type NetAlias_NetRef = string;
export type NetCombine_NetRef = string;
export type EmptyConfig = null;
export type NetRule_RuleItem =
  | {
      domain: string;
      method: NetRule_DomainMatcherMethod;
      type: "domain";
      [k: string]: unknown | undefined;
    }
  | {
      ipcidr: NetRule_IpCidr;
      type: "ipcidr";
      [k: string]: unknown | undefined;
    }
  | {
      type: "any";
      [k: string]: unknown | undefined;
    };
export type NetRule_DomainMatcherMethod = "keyword" | "suffix" | "match";
export type NetRule_IpCidr = string;
export type EmptyConfig1 = null;
export type NetShadowsocks_Cipher =
  | "none"
  | "table"
  | "rc4-md5"
  | "aes-128-ctr"
  | "aes-192-ctr"
  | "aes-256-ctr"
  | "aes-128-cfb1"
  | "aes-128-cfb8"
  | "aes-128-cfb"
  | "aes-192-cfb1"
  | "aes-192-cfb8"
  | "aes-192-cfb"
  | "aes-256-cfb1"
  | "aes-256-cfb8"
  | "aes-256-cfb"
  | "aes-128-ofb"
  | "aes-192-ofb"
  | "aes-256-ofb"
  | "camellia-128-ctr"
  | "camellia-192-ctr"
  | "camellia-256-ctr"
  | "camellia-128-cfb1"
  | "camellia-128-cfb8"
  | "camellia-128-cfb"
  | "camellia-192-cfb1"
  | "camellia-192-cfb8"
  | "camellia-192-cfb"
  | "camellia-256-cfb1"
  | "camellia-256-cfb8"
  | "camellia-256-cfb"
  | "camellia-128-ofb"
  | "camellia-192-ofb"
  | "camellia-256-ofb"
  | "rc4"
  | "chacha20-ietf"
  | "aes-128-gcm"
  | "aes-256-gcm"
  | "chacha20-ietf-poly1305"
  | "aes-128-ccm"
  | "aes-256-ccm"
  | "aes-128-gcm-siv"
  | "aes-256-gcm-siv"
  | "xchacha20-ietf-poly1305"
  | "sm4-gcm"
  | "sm4-ccm";
export type NetShadowsocks_NetRef = string;
export type NetTrojan_NetRef = string;
export type NetSelect_NetRef = string;
export type NetSocks5_NetRef = string;
export type NetRef = string;
export type NetRef1 = string;
export type NetRef2 = string;
export type NetRef3 = string;
export type NetRef4 = string;
export type NetRef5 = string;
export type NetRef6 = string;
export type NetRef7 = string;

export interface Config {
  net?: {
    [k: string]:
      | (
          | Config1
          | Config2
          | EmptyConfig
          | RuleConfig
          | EmptyConfig1
          | SSNetConfig
          | TrojanNetConfig
          | SelectConfig
          | ClientConfig
        )
      | undefined;
  };
  server?: {
    [k: string]: (ServerConfig | ServerConfig1 | ForwardConfig | ServerConfig2) | undefined;
  };
  [k: string]: unknown | undefined;
}
export interface Config1 {
  net: NetAlias_NetRef;
  type: "alias";
  [k: string]: unknown | undefined;
}
export interface Config2 {
  tcp_bind: NetCombine_NetRef;
  tcp_connect: NetCombine_NetRef;
  type: "combine";
  udp_bind: NetCombine_NetRef;
  [k: string]: unknown | undefined;
}
export interface RuleConfig {
  rule: NetRule_RuleItem[];
  type: "rule";
  [k: string]: unknown | undefined;
}
export interface SSNetConfig {
  cipher: NetShadowsocks_Cipher;
  net?: NetShadowsocks_NetRef & string;
  password: string;
  port: number;
  server: string;
  type: "shadowsocks";
  udp?: boolean;
  [k: string]: unknown | undefined;
}
export interface TrojanNetConfig {
  net?: NetTrojan_NetRef & string;
  /**
   * password in plain text
   */
  password: string;
  /**
   * hostname:port
   */
  server: string;
  /**
   * skip certificate verify
   */
  skip_cert_verify?: boolean;
  /**
   * sni
   */
  sni: string;
  type: "trojan";
  /**
   * enable udp or not
   */
  udp?: boolean;
  [k: string]: unknown | undefined;
}
export interface SelectConfig {
  list: string[];
  selected: NetSelect_NetRef;
  type: "select";
  [k: string]: unknown | undefined;
}
export interface ClientConfig {
  address: string;
  net?: NetSocks5_NetRef & string;
  port: number;
  type: "socks5";
  [k: string]: unknown | undefined;
}
export interface ServerConfig {
  bind: string;
  listen?: NetRef;
  net?: NetRef1;
  type: "http";
  [k: string]: unknown | undefined;
}
export interface ServerConfig1 {
  bind: string;
  listen?: NetRef2;
  net?: NetRef3;
  type: "socks5";
  [k: string]: unknown | undefined;
}
export interface ForwardConfig {
  bind: string;
  listen?: NetRef4;
  net?: NetRef5;
  target: string;
  type: "forward";
  [k: string]: unknown | undefined;
}
export interface ServerConfig2 {
  bind: string;
  listen?: NetRef6;
  net?: NetRef7;
  type: "http+socks5";
  [k: string]: unknown | undefined;
}
