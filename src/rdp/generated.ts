/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Nullable_String = string | null;
export type ImportSource =
  | {
      path: string;
    }
  | {
      poll: ImportUrl;
    }
  | {
      storage: ImportStorage;
    };
export type EmptyConfig = null;
export type Net =
  | (
      | AliasNetConfig
      | EmptyConfig1
      | CombineNetConfig
      | DNSNetConfig
      | HttpNetConfig
      | LocalNetConfig
      | EmptyConfig2
      | ObfsNetConfig
      | RawNetConfig
      | ResolveConfig
      | RpcNetConfig
      | RuleNetConfig
      | SelectNetConfig
      | SSNetConfig
      | Socks5NetConfig
      | TrojanNetConfig
    )
  | undefined;
export type EmptyConfig1 = null;
export type EmptyConfig2 = null;
export type ObfsNetConfig =
  | {
      obfs_param: string;
      obfs_type: "http_simple";
      [k: string]: unknown | undefined;
    }
  | {
      obfs_type: "plain";
      [k: string]: unknown | undefined;
    };
export type NetRaw_MaybeStringFor_TunTapConfig = string | NetRaw_TunTapConfig;
export type NetRaw_TunTap = "tap" | "tun";
export type NetRule_RuleItem =
  | {
      domain: NetRule_SingleOrVecFor_String;
      method: NetRule_DomainMatcherMethod;
      type: "domain";
      [k: string]: unknown | undefined;
    }
  | {
      ipcidr: NetRule_SingleOrVecFor_IpCidr;
      type: "ipcidr";
      [k: string]: unknown | undefined;
    }
  | {
      ipcidr: NetRule_SingleOrVecFor_IpCidr;
      type: "src_ipcidr";
      [k: string]: unknown | undefined;
    }
  | {
      country: string;
      type: "geoip";
      [k: string]: unknown | undefined;
    }
  | {
      type: "any";
      [k: string]: unknown | undefined;
    };
export type NetRule_SingleOrVecFor_String = string | string[];
export type NetRule_DomainMatcherMethod = "keyword" | "suffix" | "match";
export type NetRule_SingleOrVecFor_IpCidr = NetRule_IpCidr | NetRule_IpCidr[];
export type NetRule_IpCidr = string;
export type NetShadowsocks_Cipher =
  | "none"
  | "table"
  | "rc4-md5"
  | "aes-128-ctr"
  | "aes-192-ctr"
  | "aes-256-ctr"
  | "aes-128-cfb1"
  | "aes-128-cfb8"
  | "aes-128-cfb"
  | "aes-192-cfb1"
  | "aes-192-cfb8"
  | "aes-192-cfb"
  | "aes-256-cfb1"
  | "aes-256-cfb8"
  | "aes-256-cfb"
  | "aes-128-ofb"
  | "aes-192-ofb"
  | "aes-256-ofb"
  | "camellia-128-ctr"
  | "camellia-192-ctr"
  | "camellia-256-ctr"
  | "camellia-128-cfb1"
  | "camellia-128-cfb8"
  | "camellia-128-cfb"
  | "camellia-192-cfb1"
  | "camellia-192-cfb8"
  | "camellia-192-cfb"
  | "camellia-256-cfb1"
  | "camellia-256-cfb8"
  | "camellia-256-cfb"
  | "camellia-128-ofb"
  | "camellia-192-ofb"
  | "camellia-256-ofb"
  | "rc4"
  | "chacha20-ietf"
  | "aes-128-gcm"
  | "aes-256-gcm"
  | "chacha20-ietf-poly1305"
  | "aes-128-ccm"
  | "aes-256-ccm"
  | "aes-128-gcm-siv"
  | "aes-256-gcm-siv"
  | "xchacha20-ietf-poly1305"
  | "sm4-gcm"
  | "sm4-ccm";
export type Server =
  | (
      | EchoServerConfig
      | ForwardServerConfig
      | HttpServerConfig
      | MixedServerConfig
      | RawServerConfig
      | RpcServerConfig
      | SSServerConfig
      | Socks5ServerConfig
    )
  | undefined;
export type ServerShadowsocks_Cipher =
  | "none"
  | "table"
  | "rc4-md5"
  | "aes-128-ctr"
  | "aes-192-ctr"
  | "aes-256-ctr"
  | "aes-128-cfb1"
  | "aes-128-cfb8"
  | "aes-128-cfb"
  | "aes-192-cfb1"
  | "aes-192-cfb8"
  | "aes-192-cfb"
  | "aes-256-cfb1"
  | "aes-256-cfb8"
  | "aes-256-cfb"
  | "aes-128-ofb"
  | "aes-192-ofb"
  | "aes-256-ofb"
  | "camellia-128-ctr"
  | "camellia-192-ctr"
  | "camellia-256-ctr"
  | "camellia-128-cfb1"
  | "camellia-128-cfb8"
  | "camellia-128-cfb"
  | "camellia-192-cfb1"
  | "camellia-192-cfb8"
  | "camellia-192-cfb"
  | "camellia-256-cfb1"
  | "camellia-256-cfb8"
  | "camellia-256-cfb"
  | "camellia-128-ofb"
  | "camellia-192-ofb"
  | "camellia-256-ofb"
  | "rc4"
  | "chacha20-ietf"
  | "aes-128-gcm"
  | "aes-256-gcm"
  | "chacha20-ietf-poly1305"
  | "aes-128-ccm"
  | "aes-256-ccm"
  | "aes-128-gcm-siv"
  | "aes-256-gcm-siv"
  | "xchacha20-ietf-poly1305"
  | "sm4-gcm"
  | "sm4-ccm";

export interface Config {
  id?: string;
  import?: (Clash | EmptyConfig)[];
  net?: {
    [k: string]: NetUndefined;
  };
  server?: {
    [k: string]: ServerUndefined;
  };
  [k: string]: unknown | undefined;
}
export interface Clash {
  direct?: string | null;
  disable_proxy_group?: boolean;
  name?: Nullable_String;
  prefix?: string | null;
  reject?: string | null;
  rule_name?: string | null;
  /**
   * Make all proxies in the group name
   */
  select?: string | null;
  source: ImportSource;
  type: "clash";
  [k: string]: unknown | undefined;
}
export interface ImportUrl {
  interval?: number | null;
  url: string;
  [k: string]: unknown | undefined;
}
export interface ImportStorage {
  folder: string;
  key: string;
  [k: string]: unknown | undefined;
}
/**
 * A net refering to another net.
 */
export interface AliasNetConfig {
  net: string | Net | undefined;
  type: "alias";
  [k: string]: unknown | undefined;
}
/**
 * CombineNet merges multiple nets into one.
 */
export interface CombineNetConfig {
  lookup_host: string | Net | undefined;
  tcp_bind: string | Net | undefined;
  tcp_connect: string | Net | undefined;
  type: "combine";
  udp_bind: string | Net | undefined;
  [k: string]: unknown | undefined;
}
export interface DNSNetConfig {
  net?: string | Net | undefined;
  type: "dns_sniffer";
  [k: string]: unknown | undefined;
}
export interface HttpNetConfig {
  net?: string | Net | undefined;
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  server: string;
  type: "http";
  [k: string]: unknown | undefined;
}
/**
 * A local network.
 */
export interface LocalNetConfig {
  /**
   * bind to address
   */
  bind_addr?: string | null;
  /**
   * bind to device
   */
  bind_device?: string | null;
  /**
   * timeout of TCP connect, in seconds.
   */
  connect_timeout?: number | null;
  /**
   * set SO_MARK on linux
   */
  mark?: number | null;
  /**
   * set nodelay. default is true
   */
  nodelay?: boolean | null;
  /**
   * enable keepalive on TCP socket, in seconds. default is 600s.
   */
  tcp_keepalive?: number | null;
  /**
   * set ttl
   */
  ttl?: number | null;
  type: "local";
  [k: string]: unknown | undefined;
}
export interface RawNetConfig {
  device: NetRaw_MaybeStringFor_TunTapConfig;
  ethernet_addr?: string | null;
  forward?: boolean;
  gateway?: string | null;
  /**
   * IP Cidr
   */
  ip_addr: string;
  mtu: number;
  type: "raw";
  [k: string]: unknown | undefined;
}
export interface NetRaw_TunTapConfig {
  /**
   * host address
   */
  host_addr: string;
  name?: string | null;
  type: NetRaw_TunTap;
  [k: string]: unknown | undefined;
}
export interface ResolveConfig {
  ipv4?: boolean;
  ipv6?: boolean;
  net: string | Net | undefined;
  resolve_net: string | Net | undefined;
  type: "resolve";
  [k: string]: unknown | undefined;
}
export interface RpcNetConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  endpoint: string;
  net?: string | Net | undefined;
  type: "rpc";
  [k: string]: unknown | undefined;
}
export interface RuleNetConfig {
  lru_cache_size?: number;
  rule: NetRule_RuleItem[];
  type: "rule";
  [k: string]: unknown | undefined;
}
export interface SelectNetConfig {
  list: (string | Net | undefined)[];
  selected: string | Net | undefined;
  type: "select";
  [k: string]: unknown | undefined;
}
export interface SSNetConfig {
  cipher: NetShadowsocks_Cipher;
  net?: string | Net | undefined;
  password: string;
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  server: string;
  type: "shadowsocks";
  udp?: boolean;
  [k: string]: unknown | undefined;
}
export interface Socks5NetConfig {
  net?: string | Net | undefined;
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  server: string;
  type: "socks5";
  [k: string]: unknown | undefined;
}
export interface TrojanNetConfig {
  net?: string | Net | undefined;
  /**
   * password in plain text
   */
  password: string;
  /**
   * hostname:port
   */
  server: string;
  /**
   * skip certificate verify
   */
  skip_cert_verify?: boolean;
  /**
   * sni
   */
  sni?: string | null;
  type: "trojan";
  /**
   * enable udp or not
   */
  udp?: boolean;
  /**
   * enabled websocket support
   */
  websocket?: NetTrojan_WebSocket | null;
  [k: string]: unknown | undefined;
}
export interface NetTrojan_WebSocket {
  host: string;
  path: string;
  [k: string]: unknown | undefined;
}
/**
 * A echo server.
 */
export interface EchoServerConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  bind: string;
  listen?: string | Net | undefined;
  type: "echo";
  [k: string]: unknown | undefined;
}
/**
 * A server that forwards all connections to target.
 */
export interface ForwardServerConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  bind: string;
  listen?: string | Net | undefined;
  net?: string | Net | undefined;
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  target: string;
  type: "forward";
  udp?: boolean;
  [k: string]: unknown | undefined;
}
export interface HttpServerConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  bind: string;
  listen?: string | Net | undefined;
  net?: string | Net | undefined;
  type: "http";
  [k: string]: unknown | undefined;
}
export interface MixedServerConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  bind: string;
  listen?: string | Net | undefined;
  net?: string | Net | undefined;
  type: "http+socks5";
  [k: string]: unknown | undefined;
}
export interface RawServerConfig {
  /**
   * Must be raw net.
   */
  listen: string | Net | undefined;
  net?: string | Net | undefined;
  type: "raw";
  [k: string]: unknown | undefined;
}
export interface RpcServerConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  bind: string;
  listen?: string | Net | undefined;
  net?: string | Net | undefined;
  type: "rpc";
  [k: string]: unknown | undefined;
}
export interface SSServerConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  bind: string;
  cipher: ServerShadowsocks_Cipher;
  listen?: string | Net | undefined;
  net?: string | Net | undefined;
  password: string;
  type: "shadowsocks";
  udp?: boolean;
  [k: string]: unknown | undefined;
}
export interface Socks5ServerConfig {
  /**
   * An address contains host and port.
   * For example: example.com:80, 1.1.1.1:53, [::1]:443
   */
  bind: string;
  listen?: string | Net | undefined;
  net?: string | Net | undefined;
  type: "socks5";
  [k: string]: unknown | undefined;
}
